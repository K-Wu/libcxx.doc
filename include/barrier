// -*- C++ -*-
//===--------------------------- barrier ----------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_BARRIER
#define _LIBCPP_BARRIER

/*
    barrier synopsis

namespace std 
{

  template<class CompletionFunction = see below>
  class barrier 
  {
  public:
    using arrival_token = see below;

    constexpr explicit barrier(ptrdiff_t phase_count,
                               CompletionFunction f = CompletionFunction());
    ~barrier();

    barrier(const barrier&) = delete;
    barrier& operator=(const barrier&) = delete;

    [[nodiscard]] arrival_token arrive(ptrdiff_t update = 1);
    void wait(arrival_token&& arrival) const;

    void arrive_and_wait();
    void arrive_and_drop();

  private:
    CompletionFunction completion; // exposition only
  };

}

*/

#ifndef __simt__
#include <__config>
#include <__threading_support>
#include <atomic>
# ifndef _LIBCPP_HAS_NO_BARRIER_BUTTERFLY
#  include <thread>
#  include <vector>
# endif
#endif

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

#ifdef _LIBCPP_HAS_NO_THREADS
# error <barrier> is not supported on this single threaded system
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

struct EmptyCompletionF 
{
    inline _LIBCPP_INLINE_VISIBILITY
    void operator()() noexcept { }
};

#ifndef _LIBCPP_HAS_NO_BARRIER_BUTTERFLY

template<class CompletionF = EmptyCompletionF, int _Sco = 0>
class __barrier_base {

    using __phase_t = uint8_t;    

    struct alignas(64) __state_t {
        struct { 
            __atomic_base<__phase_t, _Sco> value = ATOMIC_VAR_INIT(0);
        } phases[64]; //< this many rounds could barrier the universe
    };

    alignas(64) ptrdiff_t           expected;
    __atomic_base<ptrdiff_t, _Sco>  expected_adjustment;
    __atomic_base<__phase_t, _Sco>  phase;
    alignas(64) vector<__state_t>   state;
    CompletionF                     completion;

    inline _LIBCPP_INLINE_VISIBILITY
    static constexpr __phase_t __next_phase(__phase_t old) 
    { 
        return (old + 1) & 3; 
    }
    inline _LIBCPP_INLINE_VISIBILITY
    bool __try_get_id(ptrdiff_t const id, __phase_t const old_phase, __phase_t const next_phase) 
    {
        return old_phase == state[id].phases[63].value.exchange(next_phase, memory_order_relaxed);
    }
    inline _LIBCPP_INLINE_VISIBILITY
    ptrdiff_t __get_id(__phase_t const old_phase, __phase_t const next_phase) 
    {
#ifndef _LIBCPP_HAS_NO_THREAD_FAVORITE_HASH
        ptrdiff_t id = __libcpp_thread_favorite_hash;
#else
        ptrdiff_t id = 0;
#endif
        while(1) {
            if(id >= expected)
                id = 0;
            if(__try_get_id(id, old_phase, next_phase))
                break;
            ++id;
        }
#ifndef _LIBCPP_HAS_NO_THREAD_FAVORITE_HASH
        __libcpp_thread_favorite_hash = id;
#endif
        return id;
    }

public:
    struct arrival_token 
    { 
        __atomic_base<__phase_t, _Sco>& phase;
        __phase_t old_phase;

        inline _LIBCPP_INLINE_VISIBILITY
        arrival_token(__atomic_base<__phase_t, _Sco>& phase, __phase_t old_phase) :
            phase(phase), old_phase(old_phase) { }
    };
    
    inline _LIBCPP_INLINE_VISIBILITY
    __barrier_base(ptrdiff_t expected, CompletionF completion = CompletionF()) 
            : expected(expected), expected_adjustment(0), phase(0),
              state(expected), completion(completion) 
    { 
        assert(expected >= 0);
    }

    inline _LIBCPP_INLINE_VISIBILITY
    ~__barrier_base() = default;

    __barrier_base(__barrier_base const&) = delete;
    __barrier_base& operator=(__barrier_base const&) = delete;

    [[nodiscard]] inline _LIBCPP_INLINE_VISIBILITY
    arrival_token arrive(ptrdiff_t update = 1) 
    {
        assert(update == 1); // should be "> 0);"
        size_t* const my_ids = (size_t*)alloca(update * sizeof(size_t));
        auto const old_phase = phase.load(memory_order_relaxed);
        auto const next_phase = __next_phase(old_phase);
        bool master = false;
        for(ptrdiff_t i = 0; i < update; ++i) {
            auto const id = __get_id(old_phase, next_phase);
            my_ids[i] = id;
                master = true;
        }
        for(ptrdiff_t j = 1, k = 0; j < expected; j <<= 1, ++k) {
            atomic_thread_fence(memory_order_release);
            for(ptrdiff_t i = 0; i < update; ++i) {
                auto id = my_ids[i] + j;
                if(id >= (size_t)expected)
                   id -= expected;
                state[id].phases[k].value.store(next_phase, memory_order_relaxed);
            }
            for(ptrdiff_t i = 0; i < update; ++i)
                while(state[my_ids[i]].phases[k].value.load(memory_order_relaxed) == old_phase)
                    ;
            atomic_thread_fence(memory_order_acquire);
        }
        if(master) {
            completion();
            expected += expected_adjustment.exchange(0, memory_order_relaxed);
            phase.store(next_phase, memory_order_release);
        }
        return arrival_token(phase, old_phase);
    }
    inline _LIBCPP_INLINE_VISIBILITY
    void wait(arrival_token&& token) const 
    {
        __libcpp_thread_poll_with_backoff([&]() -> bool {
            return token.phase.load(memory_order_acquire) != token.old_phase;
        });
    }
	inline _LIBCPP_INLINE_VISIBILITY
    void arrive_and_wait() 
    {
        wait(arrive());
	}
    inline _LIBCPP_INLINE_VISIBILITY
    void arrive_and_drop() 
    {
        expected_adjustment.fetch_sub(1, memory_order_relaxed);
        (void)arrive();
    }
};

#else

template<class CompletionF, int _Sco = 0>
class __barrier_base {

    alignas(64) __atomic_base<ptrdiff_t, _Sco> expected, arrived;
    alignas(64) CompletionF                    completion;
    alignas(64) __atomic_base<bool, _Sco>      phase;
public:
    using arrival_token = bool;

    _LIBCPP_INLINE_VISIBILITY
    __barrier_base(ptrdiff_t expected, CompletionF completion = CompletionF()) 
        : phase(false), expected(expected), arrived(expected), completion(completion) 
    {
    }

    ~__barrier_base() = default;

    __barrier_base(__barrier_base const&) = delete;
    __barrier_base& operator=(__barrier_base const&) = delete;

    [[nodiscard]] _LIBCPP_INLINE_VISIBILITY
    arrival_token arrive(ptrdiff_t update = 1) 
    {
        auto const old_phase = phase.load(memory_order_relaxed);
        auto const result = arrived.fetch_sub(update, memory_order_acq_rel) - update;
        assert(result >= 0);
        auto const new_expected = expected.load(memory_order_relaxed);
        if(0 == result) {
            completion();
            arrived.store(new_expected, memory_order_relaxed);
            phase.store(!old_phase, memory_order_release);
            atomic_notify_all(&phase);
        }
        return old_phase;
    }
    _LIBCPP_INLINE_VISIBILITY
    void wait(arrival_token&& old_phase) const 
    {
        phase.wait(old_phase, memory_order_acquire);
    }
	_LIBCPP_INLINE_VISIBILITY 
    void arrive_and_wait() 
    {
        wait(arrive());
	}
    _LIBCPP_INLINE_VISIBILITY
    void arrive_and_drop() 
    {
        expected.fetch_sub(1, memory_order_relaxed);
        (void)arrive();
    }
};

template<int _Sco>
class __barrier_base<EmptyCompletionF, _Sco> {

    static constexpr uint64_t expected_unit = 1ull;
    static constexpr uint64_t arrived_unit = 1ull << 32;
    static constexpr uint64_t expected_mask = arrived_unit - 1;
    static constexpr uint64_t phase_bit = 1ull << 63;
    static constexpr uint64_t arrived_mask = (phase_bit - 1) & ~expected_mask;

    alignas(64) __atomic_base<uint64_t, _Sco> phase_arrived_expected;

    static inline _LIBCPP_INLINE_VISIBILITY
    constexpr uint64_t __init(ptrdiff_t count) _NOEXCEPT 
    {
        return (((1u << 31) - count) << 32) 
              | ((1u << 31) - count);
    }

public:
    using arrival_token = uint64_t;

    _LIBCPP_INLINE_VISIBILITY
    __barrier_base(ptrdiff_t count, EmptyCompletionF = EmptyCompletionF()) 
        : phase_arrived_expected(__init(count)) { 
    }

    ~__barrier_base() = default;

    __barrier_base(__barrier_base const&) = delete;
    __barrier_base& operator=(__barrier_base const&) = delete;

    [[nodiscard]] inline _LIBCPP_INLINE_VISIBILITY
    arrival_token arrive(ptrdiff_t update = 1) 
    {
        auto const inc = arrived_unit * update;
        auto const old = phase_arrived_expected.fetch_add(inc, memory_order_acq_rel);
        if((old ^ (old + inc)) & phase_bit) {
            phase_arrived_expected.fetch_add((old & expected_mask) << 32, memory_order_relaxed);
            phase_arrived_expected.notify_all();
        }
        return old & phase_bit;
    }
    inline _LIBCPP_INLINE_VISIBILITY 
    void wait(arrival_token&& phase) const
    {
#if defined(__CUDACC__)
        __libcpp_thread_poll_with_backoff([&] _LIBCPP_INLINE_VISIBILITY () -> bool
#else
        __libcpp_thread_poll_with_backoff([&]() -> bool
#endif
        {
            uint64_t const current = phase_arrived_expected.load(memory_order_acquire);
            return ((current & phase_bit) != phase);
        });
    }
	inline _LIBCPP_INLINE_VISIBILITY
    void arrive_and_wait() 
    {
        wait(arrive());
	}
    inline _LIBCPP_INLINE_VISIBILITY
    void arrive_and_drop() 
    {
        phase_arrived_expected.fetch_add(expected_unit, memory_order_relaxed);
        (void)arrive();
    }
};

#endif //_LIBCPP_HAS_NO_BARRIER_BUTTERFLY

template<class CompletionF = EmptyCompletionF>
class barrier : public __barrier_base<CompletionF> {
public:
    _LIBCPP_INLINE_VISIBILITY
    barrier(ptrdiff_t count, CompletionF completion = CompletionF()) 
        : __barrier_base<CompletionF>(count, completion) { 
    }
};

_LIBCPP_END_NAMESPACE_STD

#endif //_LIBCPP_BARRIER
